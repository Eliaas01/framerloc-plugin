import {
  require_react
} from "./chunk-CANBAPAS.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/framer-plugin/dist/index.js
var import_react = __toESM(require_react());
var import_react2 = __toESM(require_react());
var import_react3 = __toESM(require_react());
var gt = Symbol();
var yt = Symbol();
var vn = Symbol();
var kn = Symbol();
var V = Symbol();
var m = Symbol();
var ht = Symbol();
var ft = Symbol();
var v = { getAiServiceInfo: gt, sendTrackingEvent: yt, environmentInfo: vn, showUncheckedPermissionToasts: kn, revive: V, serialize: m, getHTMLForNode: ht, setHTMLForNode: ft };
var Pe = "INTERNAL_";
var Se = `${Pe}getAiServiceInfo`;
var De = `${Pe}sendTrackingEvent`;
var O = `${Pe}getHTMLForNode`;
var G = `${Pe}setHTMLForNode`;
function Ne(i12) {
  return i12 !== void 0;
}
function u(i12) {
  return i12 === null;
}
function Ci(i12) {
  return i12 !== null;
}
function ee(i12) {
  return i12 === true || i12 === false;
}
function l(i12) {
  return typeof i12 == "string";
}
function H(i12) {
  return typeof i12 == "number" && Number.isFinite(i12);
}
function te(i12) {
  return typeof i12 == "function";
}
function p(i12) {
  return typeof i12 == "object" && i12 !== null && !Array.isArray(i12);
}
function bi(i12) {
  if (typeof i12 != "object" || i12 === null) return false;
  let e = Object.getPrototypeOf(i12);
  return e === null || e === Object.prototype;
}
function Ct(i12) {
  return Array.isArray(i12);
}
function ie(i12, e) {
  throw e || new Error(i12 ? `Unexpected value: ${i12}` : "Application entered invalid state");
}
function s(i12, ...e) {
  if (i12) return;
  let t = Error("Assertion Error" + (e.length > 0 ? ": " + e.join(" ") : ""));
  if (t.stack) try {
    let n = t.stack.split(`
`);
    n[1]?.includes("assert") ? (n.splice(1, 1), t.stack = n.join(`
`)) : n[0]?.includes("assert") && (n.splice(0, 1), t.stack = n.join(`
`));
  } catch {
  }
  throw t;
}
function g(i12) {
  for (let e of Reflect.ownKeys(i12)) {
    let t = i12[e];
    !t || typeof t != "object" && !te(t) || g(t);
  }
  return Object.freeze(i12);
}
function Ii(i12, e) {
  if (i12 === e) return true;
  if (i12.length !== e.length) return false;
  for (let t = 0; t < i12.length; t++) if (i12[t] !== e[t]) return false;
  return true;
}
function Ti(i12) {
  return [i12.slice(0, -1), i12.at(-1)];
}
var An = "FileAsset";
var Vn = "__class";
function ve(i12) {
  return p(i12) ? i12[Vn] === An : false;
}
var S = class {
  id;
  url;
  extension;
  constructor(e) {
    this.url = e.url, this.id = e.id, this.extension = e.extension;
  }
  [m]() {
    return { __class: "FileAsset", id: this.id, url: this.url, extension: this.extension };
  }
};
function Wn(i12) {
  return i12 instanceof S;
}
var En = "ImageAsset";
var Mn = "__class";
function _(i12) {
  return p(i12) ? i12[Mn] === En : false;
}
var h = class i {
  id;
  url;
  thumbnailUrl;
  altText;
  resolution;
  #e;
  #t;
  constructor(e, t) {
    this.#t = t, this.url = e.url, this.id = e.id, this.thumbnailUrl = e.thumbnailUrl, this.altText = e.altText, this.resolution = e.resolution;
  }
  [m]() {
    return { __class: "ImageAsset", id: this.id, url: this.url, thumbnailUrl: this.thumbnailUrl, altText: this.altText, resolution: this.resolution };
  }
  cloneWithAttributes({ altText: e, resolution: t }) {
    return new i({ __class: "ImageAsset", id: this.id, url: this.url, thumbnailUrl: this.thumbnailUrl, altText: e !== void 0 ? e : this.altText, resolution: t !== void 0 ? t : this.resolution }, this.#t);
  }
  async measure() {
    return Ln(this.url);
  }
  async getData() {
    if (this.#e && this.#e.bytes.length > 0) return this.#e;
    let e = await this.#t.invoke("getImageData", { id: this.id, resolution: this.resolution });
    if (!e) throw new Error("Failed to load image data");
    return this.#e = e, e;
  }
  async loadBitmap() {
    let { mimeType: e, bytes: t } = await this.getData(), n = new Blob([t], { type: e });
    return createImageBitmap(n);
  }
  async loadImage() {
    let e = await this.getData(), t = URL.createObjectURL(new Blob([e.bytes]));
    return new Promise((n, o) => {
      let r = new Image();
      r.onload = () => n(r), r.onerror = () => o(), r.src = t;
    });
  }
};
function Rn(i12) {
  return i12 instanceof h;
}
function W(i12) {
  return i12.type === "bytes" ? [i12.bytes.buffer] : [];
}
function wn(i12) {
  if (!p(i12)) return false;
  let e = "bytes", t = "mimeType";
  return !(!(e in i12) || !(t in i12) || !(i12[e] instanceof Uint8Array) || !l(i12[t]));
}
async function ne(i12) {
  if (i12 instanceof File) return Tt(i12);
  let e = await Fi(i12.image);
  return { name: i12.name, altText: i12.altText, resolution: i12.resolution, preferredImageRendering: i12.preferredImageRendering, ...e };
}
async function bt(i12) {
  if (i12 instanceof File) return Tt(i12);
  let e = await Fi(i12.file);
  return { name: i12.name, ...e };
}
async function Fi(i12) {
  return i12 instanceof File ? Tt(i12) : wn(i12) ? { type: "bytes", mimeType: i12.mimeType, bytes: i12.bytes } : { type: "url", url: i12 };
}
function It(i12) {
  return Promise.all(i12.map(ne));
}
async function Tt(i12) {
  return new Promise((e, t) => {
    let n = new FileReader();
    n.onload = (o) => {
      let r = i12.type, a = o.target?.result;
      if (!a || !(a instanceof ArrayBuffer)) {
        t(new Error("Failed to read file, arrayBuffer is null"));
        return;
      }
      let d = new Uint8Array(a);
      e({ bytes: d, mimeType: r, type: "bytes", name: i12.name });
    }, n.onerror = (o) => {
      t(o);
    }, n.readAsArrayBuffer(i12);
  });
}
async function Ln(i12) {
  let e = i12 instanceof File, t = e ? URL.createObjectURL(i12) : i12, n = new Image();
  return n.crossOrigin = "anonymous", new Promise((o, r) => {
    n.onload = () => {
      o({ width: n.naturalWidth, height: n.naturalHeight });
    }, n.onerror = (a) => {
      r(a);
    }, n.src = t;
  }).finally(() => {
    e && URL.revokeObjectURL(t);
  });
}
var Bn = "Font";
function ke(i12) {
  return p(i12) && i12.__class === Bn;
}
function Un(i12) {
  if (!H(i12)) return false;
  switch (i12) {
    case 100:
    case 200:
    case 300:
    case 400:
    case 500:
    case 600:
    case 700:
    case 800:
    case 900:
      return true;
    default:
      return false;
  }
}
function zn(i12) {
  if (!l(i12)) return false;
  switch (i12) {
    case "normal":
    case "italic":
      return true;
    default:
      return false;
  }
}
function Pi(i12) {
  return p(i12) ? l(i12.family) && l(i12.selector) && Un(i12.weight) && zn(i12.style) : false;
}
var E = class {
  selector;
  family;
  weight;
  style;
  constructor(e) {
    this.selector = e.selector, this.family = e.family, this.weight = e.weight, this.style = e.style;
  }
  [m]() {
    return { __class: "Font", selector: this.selector, family: this.family, weight: this.weight, style: this.style };
  }
};
var xi = /* @__PURE__ */ new Map();
function w(i12) {
  let e = xi.get(i12.selector);
  if (e) return e;
  let t = new E(i12);
  return xi.set(i12.selector, t), t;
}
var Si = "__class";
var Ft = "LinearGradient";
var xt = "RadialGradient";
var Pt = "ConicGradient";
function Ee(i12) {
  if (!p(i12)) return false;
  switch (i12[Si]) {
    case Ft:
    case xt:
    case Pt:
      return true;
    default:
      return false;
  }
}
var K = class {
  #e;
  get stops() {
    return this.#e.stops;
  }
  constructor(e) {
    this.#e = e;
  }
  cloneWithAttributes(e) {
    let t = this.constructor;
    return new t({ ...this.#e, ...e });
  }
};
function St(i12) {
  return i12.map((e) => ({ ...e, color: l(e.color) ? e.color : e.color[m]() }));
}
function Dt(i12) {
  return i12.map((e) => (s(l(e.color), "ColorStyle not supported yet"), { ...e, color: e.color }));
}
var Ae = class i2 extends K {
  type = Ft;
  #e;
  get angle() {
    return this.#e.angle;
  }
  constructor(e) {
    super(e), this.#e = e;
  }
  static [V](e) {
    return new i2({ ...e, stops: Dt(e.stops) });
  }
  [m]() {
    return { ...this.#e, __class: this.type, stops: St(this.#e.stops) };
  }
  toCSS() {
    let e = this.#e.stops.map((t) => (s(l(t.color), "ColorStyle not supported yet"), `${t.color} ${t.position * 100}%`)).join(", ");
    return `linear-gradient(${this.angle}deg, ${e})`;
  }
};
var Ve = class i3 extends K {
  type = xt;
  #e;
  get width() {
    return this.#e.width;
  }
  get height() {
    return this.#e.height;
  }
  get x() {
    return this.#e.x;
  }
  get y() {
    return this.#e.y;
  }
  constructor(e) {
    super(e), this.#e = e;
  }
  static [V](e) {
    return new i3({ ...e, stops: Dt(e.stops) });
  }
  [m]() {
    return { ...this.#e, __class: this.type, stops: St(this.#e.stops) };
  }
  toCSS() {
    let e = this.stops.map((t, n) => {
      s(l(t.color), "ColorStyle not supported yet");
      let o = this.stops[n + 1], r = t.position === 1 && o?.position === 1 ? t.position - 1e-4 : t.position;
      return `${t.color} ${r * 100}%`;
    }).join(", ");
    return `radial-gradient(${this.width} ${this.height} at ${this.x} ${this.y}, ${e})`;
  }
};
var We = class i4 extends K {
  type = Pt;
  #e;
  get angle() {
    return this.#e.angle;
  }
  get x() {
    return this.#e.x;
  }
  get y() {
    return this.#e.y;
  }
  constructor(e) {
    super(e), this.#e = e;
  }
  static [V](e) {
    return new i4({ ...e, stops: Dt(e.stops) });
  }
  [m]() {
    return { ...this.#e, __class: this.type, stops: St(this.#e.stops) };
  }
  toCSS() {
    let e = this.stops.map((t) => (s(l(t.color), "ColorStyle not supported yet"), `${t.color} ${t.position * 360}deg`)).join(", ");
    return `conic-gradient(from ${this.angle}deg at ${this.x} ${this.y}, ${e})`;
  }
};
function Di(i12) {
  return i12 instanceof K;
}
function Me(i12) {
  switch (i12[Si]) {
    case Ft:
      return Ae[V](i12);
    case xt:
      return Ve[V](i12);
    case Pt:
      return We[V](i12);
    default:
      ie(i12);
  }
}
var On = "ColorStyle";
var Gn = "__class";
function x(i12) {
  return p(i12) ? i12[Gn] === On : false;
}
var f = class i5 {
  id;
  name;
  path;
  light;
  dark;
  #e;
  constructor(e, t) {
    this.id = e.id, this.name = e.name, this.light = e.light, this.dark = e.dark, this.path = e.path, this.#e = t;
  }
  [m]() {
    return { __class: "ColorStyle", id: this.id, name: this.name, light: this.light, dark: this.dark, path: this.path };
  }
  async setAttributes(e) {
    let t = await this.#e.invoke("setColorStyleAttributes", this.id, e);
    return t ? new i5(t, this.#e) : null;
  }
  async getPluginData(e) {
    return this.#e.invoke("getPluginDataForNode", this.id, e);
  }
  async setPluginData(e, t) {
    return this.#e.invoke("setPluginDataForNode", this.id, e, t);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeysForNode", this.id);
  }
  async remove() {
    return this.#e.invoke("removeColorStyle", this.id);
  }
};
function j(i12) {
  return i12 instanceof f;
}
var Hn = "TextStyle";
var _n = "__class";
function Re(i12) {
  return p(i12) ? i12[_n] === Hn : false;
}
var T = class i6 {
  id;
  name;
  path;
  tag;
  font;
  boldFont;
  italicFont;
  boldItalicFont;
  color;
  transform;
  alignment;
  decoration;
  decorationColor;
  decorationThickness;
  decorationStyle;
  decorationSkipInk;
  decorationOffset;
  balance;
  breakpoints;
  minWidth;
  fontSize;
  letterSpacing;
  lineHeight;
  paragraphSpacing;
  #e;
  constructor(e, t) {
    this.id = e.id, this.name = e.name, this.path = e.path, this.tag = e.tag, this.font = new E(e.font), this.boldFont = e.boldFont ? new E(e.boldFont) : null, this.italicFont = e.italicFont ? new E(e.italicFont) : null, this.boldItalicFont = e.boldItalicFont ? new E(e.boldItalicFont) : null, this.color = x(e.color) ? new f(e.color, t) : e.color, this.transform = e.transform, this.alignment = e.alignment, this.decoration = e.decoration, this.decorationColor = x(e.decorationColor) ? new f(e.decorationColor, t) : e.decorationColor, this.decorationThickness = e.decorationThickness, this.decorationStyle = e.decorationStyle, this.decorationSkipInk = e.decorationSkipInk, this.decorationOffset = e.decorationOffset, this.balance = e.balance, this.breakpoints = e.breakpoints, this.minWidth = e.minWidth, this.fontSize = e.fontSize, this.letterSpacing = e.letterSpacing, this.lineHeight = e.lineHeight, this.paragraphSpacing = e.paragraphSpacing, this.#e = t;
  }
  [m]() {
    return { __class: "TextStyle", id: this.id, name: this.name, path: this.path, tag: this.tag, font: this.font[m](), boldFont: this.boldFont ? this.boldFont[m]() : null, italicFont: this.italicFont ? this.italicFont[m]() : null, boldItalicFont: this.boldItalicFont ? this.boldItalicFont[m]() : null, color: j(this.color) ? this.color[m]() : this.color, transform: this.transform, alignment: this.alignment, decoration: this.decoration, decorationColor: j(this.decorationColor) ? this.decorationColor[m]() : this.decorationColor, decorationThickness: this.decorationThickness, decorationStyle: this.decorationStyle, decorationSkipInk: this.decorationSkipInk, decorationOffset: this.decorationOffset, balance: this.balance, breakpoints: this.breakpoints, minWidth: this.minWidth, fontSize: this.fontSize, letterSpacing: this.letterSpacing, lineHeight: this.lineHeight, paragraphSpacing: this.paragraphSpacing };
  }
  async setAttributes(e) {
    let t = await this.#e.invoke("setTextStyleAttributes", this.id, e);
    return t ? new i6(t, this.#e) : null;
  }
  async getPluginData(e) {
    return this.#e.invoke("getPluginDataForNode", this.id, e);
  }
  async setPluginData(e, t) {
    return this.#e.invoke("setPluginDataForNode", this.id, e, t);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeysForNode", this.id);
  }
  async remove() {
    return this.#e.invoke("removeTextStyle", this.id);
  }
};
function Nt(i12) {
  return i12 instanceof T;
}
function Kn(i12) {
  return p(i12) && m in i12;
}
function q(i12) {
  if (Kn(i12)) return i12[m]();
  if (Ct(i12)) return i12.map(q);
  if (bi(i12)) {
    let e = {};
    for (let t of Object.keys(i12)) e[t] = q(i12[t]);
    return e;
  }
  return i12;
}
function we(i12, e) {
  if (_(i12)) return new h(i12, e);
  if (ve(i12)) return new S(i12);
  if (Ee(i12)) return Me(i12);
  if (Re(i12)) return new T(i12, e);
  if (ke(i12)) return w(i12);
  if (x(i12)) return new f(i12, e);
  if (Ct(i12)) return i12.map((t) => we(t, e));
  if (p(i12)) {
    let t = {};
    for (let n of Object.keys(i12)) t[n] = we(i12[n], e);
    return t;
  }
  return i12;
}
var oe = class extends Error {
  name = this.constructor.name;
};
var M = class extends Error {
  name = this.constructor.name;
};
function jn(i12) {
  return i12.type === "separator";
}
function Le(i12, e) {
  let t = [];
  for (let n of i12) {
    if (jn(n)) {
      t.push(n);
      continue;
    }
    let { onAction: o, ...r } = n, a = r;
    if (n.onAction) {
      let d = Math.random();
      e.set(d, n.onAction), a.actionId = d;
    }
    n.submenu && (a.submenu = Le(n.submenu, e)), t.push(a);
  }
  return t;
}
var qn = { canvas: true, image: true, editImage: true, configureManagedCollection: true, syncManagedCollection: true, collection: true, localization: true, code: true };
var tr = Object.keys(qn);
var Be = "type";
var Ni = { [Be]: "pluginReadySignal" };
var $n = "pluginReadyResponse";
var Xn = { methodResponse: true, subscriptionMessage: true, permissionUpdate: true, menuAction: true };
function vi(i12) {
  return p(i12) && l(i12[Be]) && i12[Be] in Xn;
}
function ki(i12) {
  return p(i12) && i12[Be] === $n;
}
var vt = "boolean";
var kt = "number";
var At = "string";
var Vt = "formattedText";
var Wt = "enum";
var Et = "color";
var Mt = "image";
var Rt = "file";
var wt = "link";
var Lt = "date";
var Bt = "border";
var Ut = "unsupported";
var C = class {
  #e;
  #t;
  #i;
  get id() {
    return this.#i.id;
  }
  get name() {
    return this.#i.name;
  }
  get description() {
    return this.#i.description ?? null;
  }
  constructor(e, t, n) {
    this.#e = e, this.#t = t, this.#i = n;
  }
  async remove() {
    await this.#e.invoke("removeVariables", this.#t, [this.id]);
  }
};
var Ue = class extends C {
  type = vt;
};
var ze = class extends C {
  type = kt;
};
var Oe = class extends C {
  type = At;
  #e;
  get basedOn() {
    return this.#e.basedOn ?? null;
  }
  constructor(e, t, n) {
    super(e, t, n), this.#e = n;
  }
};
var Ge = class extends C {
  type = Vt;
};
var He = class {
  #e;
  get id() {
    return this.#e.id;
  }
  get name() {
    return this.#e.name;
  }
  get nameByLocale() {
    return this.#e.nameByLocale;
  }
  constructor(e) {
    this.#e = e;
  }
};
var _e = class extends C {
  type = Wt;
  #e;
  #t;
  get cases() {
    return this.#t || (this.#t = g(this.#e.cases.map((e) => new He(e)))), this.#t;
  }
  constructor(e, t, n) {
    super(e, t, n), this.#e = n;
  }
};
var Ke = class extends C {
  type = Et;
};
var je = class extends C {
  type = Mt;
};
var qe = class extends C {
  type = Rt;
  #e;
  get allowedFileTypes() {
    return this.#e.allowedFileTypes;
  }
  constructor(e, t, n) {
    super(e, t, n), this.#e = n;
  }
};
var $e = class extends C {
  type = wt;
};
var Xe = class extends C {
  type = Lt;
};
var Ye = class extends C {
  type = Bt;
};
var re = class extends C {
  type = Ut;
};
function zt(i12, e, t) {
  return i12.map((n) => {
    switch (n.type) {
      case vt:
        return new Ue(e, t, n);
      case kt:
        return new ze(e, t, n);
      case At:
        return new Oe(e, t, n);
      case Vt:
        return new Ge(e, t, n);
      case Wt:
        return new _e(e, t, n);
      case Et:
        return new Ke(e, t, n);
      case Mt:
        return new je(e, t, n);
      case Rt:
        return new qe(e, t, n);
      case wt:
        return new $e(e, t, n);
      case Lt:
        return new Xe(e, t, n);
      case Bt:
        return new Ye(e, t, n);
      case Ut:
        return new re(e, t, n);
      default:
        return new re(e, t, n);
    }
  });
}
function Yn(i12) {
  return i12 instanceof C;
}
var Zn = { fixed: true, sticky: true, absolute: true, relative: true };
var Ai = "position";
function pr(i12) {
  if (!(Ai in i12)) return false;
  let e = i12[Ai];
  return l(e) && Zn[e] === true;
}
var Vi = "top";
function mr(i12) {
  if (!(Vi in i12)) return false;
  let e = i12[Vi];
  return l(e) || u(e);
}
var Wi = "width";
function gr(i12) {
  if (!(Wi in i12)) return false;
  let e = i12[Wi];
  return l(e) || u(e);
}
var Ei = "maxWidth";
function yr(i12) {
  if (!(Ei in i12)) return false;
  let e = i12[Ei];
  return l(e) || u(e);
}
var Mi = "aspectRatio";
function hr(i12) {
  if (!(Mi in i12)) return false;
  let e = i12[Mi];
  return H(e) || u(e);
}
var Ri = "name";
function fr(i12) {
  if (!(Ri in i12)) return false;
  let e = i12[Ri];
  return l(e) || u(e);
}
var wi = "visible";
function Cr(i12) {
  if (!(wi in i12)) return false;
  let e = i12[wi];
  return ee(e);
}
var Li = "locked";
function br(i12) {
  if (!(Li in i12)) return false;
  let e = i12[Li];
  return ee(e);
}
var Bi = "backgroundColor";
function Ir(i12) {
  if (!(Bi in i12)) return false;
  let e = i12[Bi];
  return l(e) || j(e) || u(e);
}
var Ui = "backgroundColor";
function Tr(i12) {
  if (!(Ui in i12)) return false;
  let e = i12[Ui];
  return l(e) || x(e) || u(e);
}
var zi = "backgroundImage";
function Fr(i12) {
  if (!(zi in i12)) return false;
  let e = i12[zi];
  return e instanceof h || u(e);
}
var Oi = "backgroundImage";
function xr(i12) {
  if (!(Oi in i12)) return false;
  let e = i12[Oi];
  return e instanceof h ? false : _(e) || u(e);
}
var Gi = "backgroundGradient";
function Pr(i12) {
  if (!(Gi in i12)) return false;
  let e = i12[Gi];
  return Di(e) || u(e);
}
var Hi = "backgroundGradient";
function Sr(i12) {
  if (!(Hi in i12)) return false;
  let e = i12[Hi];
  return p(e) || u(e);
}
var _i = "rotation";
function Dr(i12) {
  if (!(_i in i12)) return false;
  let e = i12[_i];
  return H(e);
}
var Ki = "opacity";
function Nr(i12) {
  if (!(Ki in i12)) return false;
  let e = i12[Ki];
  return H(e);
}
var ji = "borderRadius";
function vr(i12) {
  if (!(ji in i12)) return false;
  let e = i12[ji];
  return l(e) || u(e);
}
var qi = "border";
function kr(i12) {
  if (!(qi in i12)) return false;
  let e = i12[qi];
  return u(e) || j(e.color);
}
var $i = "svg";
function Ar(i12) {
  if (!($i in i12)) return false;
  let e = i12[$i];
  return l(e);
}
var Xi = "componentIdentifier";
function Vr(i12) {
  if (!(Xi in i12)) return false;
  let e = i12[Xi];
  return l(e);
}
var Yi = "font";
function Wr(i12) {
  if (!(Yi in i12)) return false;
  let e = i12[Yi];
  return Pi(e);
}
var Zi = "font";
function Er(i12) {
  if (!(Zi in i12)) return false;
  let e = i12[Zi];
  return ke(e) || u(e);
}
var Ji = "inlineTextStyle";
function Mr(i12) {
  if (!(Ji in i12)) return false;
  let e = i12[Ji];
  return Nt(e) || u(e);
}
var Qi = "inlineTextStyle";
function Rr(i12) {
  if (!(Qi in i12)) return false;
  let e = i12[Qi];
  return Re(e) || u(e);
}
var en = "link";
function wr(i12) {
  if (!(en in i12)) return false;
  let e = i12[en];
  return l(e) || u(e);
}
var tn = "imageRendering";
function Lr(i12) {
  if (!(tn in i12)) return false;
  let e = i12[tn];
  return l(e) || u(e);
}
var nn = "layout";
function an(i12) {
  if (!(nn in i12)) return false;
  let e = i12[nn];
  return l(e) || u(e);
}
function Br(i12) {
  return an(i12) ? i12.layout === "stack" : false;
}
function Ur(i12) {
  return an(i12) ? i12.layout === "grid" : false;
}
var on = "isVariant";
function sn(i12) {
  if (!(on in i12)) return false;
  let e = i12[on];
  return ee(e);
}
function Ot(i12) {
  return sn(i12) ? i12.isVariant : false;
}
function ln(i12) {
  return !sn(i12) || !Ot(i12) ? false : !u(i12.gesture);
}
var rn = "isBreakpoint";
function Jn(i12) {
  if (!(rn in i12)) return false;
  let e = i12[rn];
  return ee(e);
}
function dn(i12) {
  return Jn(i12) ? i12.isBreakpoint : false;
}
var F = class {
  id;
  originalId;
  #e;
  constructor(e, t) {
    this.id = e.id, this.originalId = e.originalId ?? null, this.#e = t;
  }
  get isReplica() {
    return this.originalId !== null;
  }
  async remove() {
    return this.#e.invoke("removeNodes2", [this.id]);
  }
  async select() {
    return this.#e.invoke("setSelection", [this.id]);
  }
  async clone() {
    if (this.__class === "UnknownNode") throw Error("Can not clone unknown node");
    return this.#e.cloneNode(this.id);
  }
  async setAttributes(e) {
    if (this.__class === "UnknownNode") throw Error("Can not set attributes on unknown node");
    return this.#e.setAttributes(this.id, e);
  }
  async getRect() {
    return this.#e.invoke("getRect", this.id);
  }
  async zoomIntoView(e) {
    return this.#e.invoke("zoomIntoView", [this.id], e);
  }
  async navigateTo(e) {
    return this.#e.invoke("navigateTo", this.id, e);
  }
  async getParent() {
    return this.#e.getParent(this.id);
  }
  async getChildren() {
    return L(this) ? Promise.resolve([]) : this.#e.getChildren(this.id);
  }
  async getNodesWithType(e) {
    return L(this) ? Promise.resolve([]) : (await this.#e.invoke("getNodesWithType", this.id, e)).map((n) => c(n, this.#e));
  }
  async getNodesWithAttribute(e) {
    return L(this) ? Promise.resolve([]) : (await this.#e.invoke("getNodesWithAttribute", this.id, e)).map((n) => c(n, this.#e));
  }
  async getNodesWithAttributeSet(e) {
    return L(this) ? Promise.resolve([]) : (await this.#e.invoke("getNodesWithAttributeSet", this.id, e)).map((n) => c(n, this.#e));
  }
  async *walk() {
    if (yield this, !L(this)) for (let e of await this.getChildren()) yield* e.walk();
  }
  async getPluginData(e) {
    return this.#e.invoke("getPluginDataForNode", this.id, e);
  }
  async setPluginData(e, t) {
    return this.#e.invoke("setPluginDataForNode", this.id, e, t);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeysForNode", this.id);
  }
};
var D = class extends F {
  __class = "FrameNode";
  name;
  visible;
  locked;
  backgroundColor;
  backgroundImage;
  backgroundGradient;
  rotation;
  opacity;
  borderRadius;
  border;
  imageRendering;
  position;
  top;
  right;
  bottom;
  left;
  centerX;
  centerY;
  width;
  height;
  maxWidth;
  minWidth;
  maxHeight;
  minHeight;
  aspectRatio;
  link;
  linkOpenInNewTab;
  layout;
  gap;
  padding;
  stackDirection;
  stackDistribution;
  stackAlignment;
  stackWrapEnabled;
  gridColumnCount;
  gridRowCount;
  gridAlignment;
  gridColumnWidthType;
  gridColumnWidth;
  gridColumnMinWidth;
  gridRowHeightType;
  gridRowHeight;
  gridItemFillCellWidth;
  gridItemFillCellHeight;
  gridItemHorizontalAlignment;
  gridItemVerticalAlignment;
  gridItemColumnSpan;
  gridItemRowSpan;
  isVariant;
  isPrimaryVariant;
  isBreakpoint;
  isPrimaryBreakpoint;
  inheritsFromId;
  gesture;
  constructor(e, t) {
    super(e, t), this.name = e.name ?? null, this.visible = e.visible ?? true, this.locked = e.locked ?? false, this.backgroundColor = x(e.backgroundColor) ? new f(e.backgroundColor, t) : e.backgroundColor ?? null, this.backgroundImage = e.backgroundImage ? new h(e.backgroundImage, t) : null, this.rotation = e.rotation ?? 0, this.opacity = e.opacity ?? 1, this.borderRadius = e.borderRadius ?? null, this.border = e.border ? { width: e.border.width, color: x(e.border.color) ? new f(e.border.color, t) : e.border.color, style: e.border.style } : null, this.backgroundGradient = Ee(e.backgroundGradient) ? Me(e.backgroundGradient) : null, this.imageRendering = e.imageRendering ?? null, this.position = e.position, this.left = e.left ?? null, this.right = e.right ?? null, this.top = e.top ?? null, this.bottom = e.bottom ?? null, this.centerX = e.centerX ?? null, this.centerY = e.centerY ?? null, this.width = e.width ?? null, this.height = e.height ?? null, this.maxWidth = e.maxWidth ?? null, this.minWidth = e.minWidth ?? null, this.maxHeight = e.maxHeight ?? null, this.minHeight = e.minHeight ?? null, this.aspectRatio = e.aspectRatio ?? null, this.link = e.link ?? null, this.linkOpenInNewTab = e.linkOpenInNewTab ?? null, this.layout = e.layout ?? null, this.gap = e.gap ?? null, this.padding = e.padding ?? null, this.stackDirection = e.stackDirection ?? null, this.stackDistribution = e.stackDistribution ?? null, this.stackAlignment = e.stackAlignment ?? null, this.stackWrapEnabled = e.stackWrapEnabled ?? null, this.gridColumnCount = e.gridColumnCount ?? null, this.gridRowCount = e.gridRowCount ?? null, this.gridAlignment = e.gridAlignment ?? null, this.gridColumnWidthType = e.gridColumnWidthType ?? null, this.gridColumnWidth = e.gridColumnWidth ?? null, this.gridColumnMinWidth = e.gridColumnMinWidth ?? null, this.gridRowHeightType = e.gridRowHeightType ?? null, this.gridRowHeight = e.gridRowHeight ?? null, this.gridItemFillCellWidth = e.gridItemFillCellWidth ?? null, this.gridItemFillCellHeight = e.gridItemFillCellHeight ?? null, this.gridItemHorizontalAlignment = e.gridItemHorizontalAlignment ?? null, this.gridItemVerticalAlignment = e.gridItemVerticalAlignment ?? null, this.gridItemColumnSpan = e.gridItemColumnSpan ?? null, this.gridItemRowSpan = e.gridItemRowSpan ?? null, this.inheritsFromId = e.inheritsFromId ?? null, this.gesture = e.gesture ?? null, this.isVariant = e.isVariant ?? false, this.isPrimaryVariant = e.isPrimaryVariant ?? false, this.isBreakpoint = e.isBreakpoint ?? false, this.isPrimaryBreakpoint = e.isPrimaryBreakpoint ?? false, g(this);
  }
};
var B = class extends F {
  __class = "TextNode";
  name;
  visible;
  locked;
  rotation;
  opacity;
  font;
  inlineTextStyle;
  position;
  top;
  right;
  bottom;
  left;
  centerX;
  centerY;
  width;
  height;
  maxWidth;
  minWidth;
  maxHeight;
  minHeight;
  link;
  linkOpenInNewTab;
  gridItemFillCellWidth;
  gridItemFillCellHeight;
  gridItemHorizontalAlignment;
  gridItemVerticalAlignment;
  gridItemColumnSpan;
  gridItemRowSpan;
  #e;
  constructor(e, t) {
    super(e, t), this.#e = t, this.name = e.name ?? null, this.visible = e.visible ?? true, this.locked = e.locked ?? false, this.rotation = e.rotation ?? 0, this.opacity = e.opacity ?? 1, this.font = e.font ? w(e.font) : null, this.inlineTextStyle = e.inlineTextStyle ? new T(e.inlineTextStyle, t) : null, this.position = e.position, this.left = e.left ?? null, this.right = e.right ?? null, this.top = e.top ?? null, this.bottom = e.bottom ?? null, this.centerX = e.centerX ?? null, this.centerY = e.centerY ?? null, this.width = e.width ?? null, this.height = e.height ?? null, this.maxWidth = e.maxWidth ?? null, this.minWidth = e.minWidth ?? null, this.maxHeight = e.maxHeight ?? null, this.minHeight = e.minHeight ?? null, this.link = e.link ?? null, this.linkOpenInNewTab = e.linkOpenInNewTab ?? null, this.gridItemFillCellWidth = e.gridItemFillCellWidth ?? null, this.gridItemFillCellHeight = e.gridItemFillCellHeight ?? null, this.gridItemHorizontalAlignment = e.gridItemHorizontalAlignment ?? null, this.gridItemVerticalAlignment = e.gridItemVerticalAlignment ?? null, this.gridItemColumnSpan = e.gridItemColumnSpan ?? null, this.gridItemRowSpan = e.gridItemRowSpan ?? null, g(this);
  }
  async setText(e) {
    await this.#e.invoke("setTextForNode", this.id, e);
  }
  async getText() {
    return this.#e.invoke("getTextForNode", this.id);
  }
  async setHTML(e) {
    await this.#e.invoke(G, this.id, e), await new Promise((t) => {
      setTimeout(t, 30);
    });
  }
  async getHTML() {
    return this.#e.invoke(O, this.id);
  }
};
var ae = class extends F {
  __class = "SVGNode";
  name;
  visible;
  locked;
  svg;
  rotation;
  opacity;
  position;
  top;
  right;
  bottom;
  left;
  centerX;
  centerY;
  width;
  height;
  constructor(e, t) {
    super(e, t), this.name = e.name ?? null, this.visible = e.visible ?? true, this.locked = e.locked ?? false, this.svg = e.svg, this.rotation = e.rotation ?? 0, this.opacity = e.opacity ?? 1, this.position = e.position, this.left = e.left ?? null, this.right = e.right ?? null, this.top = e.top ?? null, this.bottom = e.bottom ?? null, this.centerX = e.centerX ?? null, this.centerY = e.centerY ?? null, this.width = e.width ?? null, this.height = e.height ?? null, g(this);
  }
};
var se = class extends F {
  __class = "VectorSetItemNode";
  name;
  visible;
  locked;
  top;
  right;
  bottom;
  left;
  centerX;
  centerY;
  width;
  height;
  #e;
  constructor(e, t) {
    super(e, t), this.#e = t, this.name = e.name ?? null, this.visible = e.visible ?? true, this.locked = e.locked ?? false, this.top = e.top ?? null, this.right = e.right ?? null, this.bottom = e.bottom ?? null, this.left = e.left ?? null, this.centerX = e.centerX ?? null, this.centerY = e.centerY ?? null, this.width = e.width ?? null, this.height = e.height ?? null, g(this);
  }
  async getSVG() {
    return this.#e.invoke("getSVGForNode", this.id);
  }
};
var le = class extends F {
  __class = "ComponentInstanceNode";
  name;
  visible;
  locked;
  componentIdentifier;
  insertURL;
  componentName;
  controls;
  rotation;
  opacity;
  position;
  top;
  right;
  bottom;
  left;
  centerX;
  centerY;
  width;
  height;
  maxWidth;
  minWidth;
  maxHeight;
  minHeight;
  aspectRatio;
  #e;
  constructor(e, t) {
    super(e, t), this.#e = t, this.name = e.name ?? null, this.visible = e.visible ?? true, this.locked = e.locked ?? false, this.componentIdentifier = e.componentIdentifier, this.componentName = e.componentName ?? null, this.insertURL = e.insertURL ?? null, this.controls = we(e.controls ?? {}, t), this.rotation = e.rotation ?? 0, this.opacity = e.opacity ?? 1, this.position = e.position, this.left = e.left ?? null, this.right = e.right ?? null, this.top = e.top ?? null, this.bottom = e.bottom ?? null, this.centerX = e.centerX ?? null, this.centerY = e.centerY ?? null, this.width = e.width ?? null, this.height = e.height ?? null, this.maxWidth = e.maxWidth ?? null, this.minWidth = e.minWidth ?? null, this.maxHeight = e.maxHeight ?? null, this.minHeight = e.minHeight ?? null, this.aspectRatio = e.aspectRatio ?? null, g(this);
  }
  async getRuntimeError() {
    return this.#e.invoke("getRuntimeErrorForCodeComponentNode", this.id);
  }
};
var de = class extends F {
  __class = "WebPageNode";
  #e;
  path;
  collectionId;
  constructor(e, t) {
    super(e, t), this.path = e.path ?? null, this.collectionId = e.collectionId ?? null, this.#e = t, g(this);
  }
  getBreakpointSuggestions() {
    return this.#e.invoke("getBreakpointSuggestionsForWebPage", this.id);
  }
  async addBreakpoint(e, t) {
    let n = await this.#e.invoke("addBreakpointToWebPage", this.id, e, t), o = c(n, this.#e);
    return s(o instanceof D), s(dn(o), "Expected node to be a FrameNode"), o;
  }
};
var U = class extends F {
  __class = "ComponentNode";
  name;
  componentIdentifier;
  insertURL;
  componentName;
  #e;
  constructor(e, t) {
    super(e, t), this.#e = t, this.componentIdentifier = e.componentIdentifier, this.insertURL = e.insertURL ?? null, this.componentName = e.componentName ?? null, this.name = e.name ?? null, g(this);
  }
  async addVariant(e, t) {
    let n = await this.#e.invoke("addVariantToComponent", this.id, e, t);
    if (!n) throw new Error("Failed to add variant to component");
    let o = c(n, this.#e);
    return s(o instanceof D), s(Ot(o), "Node is not a component variant"), o;
  }
  async addGestureVariant(e, t, n) {
    let o = await this.#e.invoke("addGestureVariantToComponent", this.id, e, t, n);
    if (!o) throw new Error("Failed to add state to component");
    let r = c(o, this.#e);
    return s(r instanceof D), s(ln(r), "Node is not a gesture variant"), r;
  }
  async getVariables() {
    let e = await this.#e.invoke("getVariables", this.id);
    return zt(e, this.#e, this.id);
  }
  async addVariables(e) {
    let t = await this.#e.invoke("addVariables", this.id, q(e));
    return zt(t, this.#e, this.id);
  }
  async removeVariables(e) {
    await this.#e.invoke("removeVariables", this.id, e);
  }
};
var ce = class extends F {
  __class = "VectorSetNode";
  name;
  constructor(e, t) {
    super(e, t), this.name = e.name ?? null, g(this);
  }
};
var ue = class extends F {
  __class = "DesignPageNode";
  name;
  constructor(e, t) {
    super(e, t), this.name = e.name ?? null, g(this);
  }
};
var pe = class extends F {
  __class = "UnknownNode";
  constructor(e, t) {
    super(e, t), g(this);
  }
};
function c(i12, e) {
  switch (i12.__class) {
    case "DesignPageNode":
      return new ue(i12, e);
    case "WebPageNode":
      return new de(i12, e);
    case "ComponentNode":
      return new U(i12, e);
    case "VectorSetNode":
      return new ce(i12, e);
    case "VectorSetItemNode":
      return new se(i12, e);
    case "ComponentInstanceNode":
      return new le(i12, e);
    case "FrameNode":
      return new D(i12, e);
    case "SVGNode":
      return new ae(i12, e);
    case "TextNode":
      return new B(i12, e);
    case "UnknownNode":
      return new pe(i12, e);
    default:
      return new pe(i12, e);
  }
}
function Ze(i12) {
  return i12 instanceof D;
}
function cn(i12) {
  return i12 instanceof B;
}
function un(i12) {
  return i12 instanceof ae;
}
function $(i12) {
  return i12 instanceof le;
}
function pn(i12) {
  return i12 instanceof de;
}
function mn(i12) {
  return i12 instanceof U;
}
function gn(i12) {
  return i12 instanceof ue;
}
function yn(i12) {
  return i12 instanceof ce;
}
function hn(i12) {
  return i12 instanceof se;
}
function L(i12) {
  return i12 instanceof pe;
}
function me(i12) {
  return !!(Ze(i12) || cn(i12) || $(i12) || un(i12) || hn(i12) || L(i12));
}
function Gt(i12) {
  return !!(pn(i12) || gn(i12) || mn(i12) || yn(i12) || L(i12));
}
var Qn = ["unstable_getCodeFile", "unstable_getCodeFiles", "unstable_getCodeFileVersionContent", "unstable_getCodeFileLint2", "unstable_getCodeFileTypecheck2", "unstable_getCodeFileVersions"];
var eo = ["closeNotification", "closePlugin", "getActiveCollection", "getActiveLocale", "getActiveManagedCollection", "getCanvasRoot", "getChildren", "getCollection", "getCollectionFields", "getCollectionFields2", "getCollectionItems", "getCollectionItems2", "getCollections", "getColorStyle", "getColorStyles", "getCurrentUser", "getCurrentUser2", "getCustomCode", "getDefaultLocale", "getFont", "getFonts", "getImage", "getImageData", "getLocales", "getLocalizationGroups", "getManagedCollection", "getManagedCollectionFields", "getManagedCollectionFields2", "getManagedCollectionItemIds", "getManagedCollections", "getNode", "getNodesWithAttribute", "getNodesWithAttributeSet", "getNodesWithType", "getParent", "getPluginData", "getPluginDataForNode", "getPluginDataKeys", "getPluginDataKeysForNode", "getProjectInfo", "getProjectInfo2", "getPublishInfo", "getRect", "getSelection", "getSVGForNode", "getText", "getTextForNode", "getTextStyle", "getTextStyles", "hideUI", "notify", "onPointerDown", "setActiveCollection", "setSelection", "showUI", "getCodeFileVersionContent", "lintCode", "typecheckCode", "getCodeFileVersions", "getCodeFiles", "getCodeFile", "getRedirects", "uploadFile", "uploadFiles", "uploadImage", "uploadImages", "zoomIntoView", "navigateTo", "getRuntimeErrorForModule", "getRuntimeErrorForCodeComponentNode", "showProgressOnInstances", "removeProgressFromInstances", "addComponentInstancePlaceholder", "updateComponentInstancePlaceholder", "removeComponentInstancePlaceholder", "setMenu", "showContextMenu", "getBreakpointSuggestionsForWebPage", "getVariables", "getVectorSets", "getVectorSetItems", "getVectorSetItemVariables", Se, De, O, "getAiServiceInfo", "sendTrackingEvent", ...Qn];
var to = new Set(eo);
function fn(i12) {
  return !to.has(i12);
}
var ge = { addComponentInstance: ["addComponentInstance"], addComponentInstancePlaceholder: [], addDetachedComponentLayers: ["addDetachedComponentLayers"], addImage: ["addImage"], addImages: ["addImages"], addSVG: ["addSVG"], addText: ["addText"], addRedirects: ["addRedirects"], getRedirects: [], removeRedirects: ["removeRedirects"], setRedirectOrder: ["setRedirectOrder"], subscribeToRedirects: [], cloneNode: ["cloneNode"], closePlugin: [], createColorStyle: ["createColorStyle"], createFrameNode: ["createNode"], createTextNode: ["createNode"], createComponentNode: ["createNode"], createTextStyle: ["createTextStyle"], getActiveCollection: [], getActiveLocale: [], getActiveManagedCollection: [], getCanvasRoot: [], getChildren: [], getCollection: [], getCollections: [], getColorStyle: [], getColorStyles: [], getCurrentUser: [], getCustomCode: [], getDefaultLocale: [], getFont: [], getFonts: [], getImage: [], getLocales: [], getLocalizationGroups: [], getManagedCollection: [], getManagedCollections: [], getNode: [], getNodesWithAttribute: [], getNodesWithAttributeSet: [], getNodesWithType: [], getParent: [], getPluginData: [], getPluginDataKeys: [], getProjectInfo: [], getPublishInfo: [], getRect: [], getSelection: [], getText: [], getTextStyle: [], getTextStyles: [], hideUI: [], lintCode: [], makeDraggable: ["onDragEnd", "onDragStart", "onDrag", "setDragData", "preloadDetachedComponentLayers", "preloadImageUrlForInsertion", "preloadDragPreviewImage"], notify: [], preloadDetachedComponentLayers: ["preloadDetachedComponentLayers"], preloadDragPreviewImage: ["preloadDragPreviewImage"], preloadImageUrlForInsertion: ["preloadImageUrlForInsertion"], removeNode: ["removeNodes2"], removeNodes: ["removeNodes2"], setAttributes: ["setAttributes"], setCustomCode: ["setCustomCode"], setImage: ["setImage"], setLocalizationData: ["setLocalizationData"], setMenu: [], showContextMenu: [], setParent: ["setParent"], setPluginData: ["setPluginData"], setSelection: [], setText: ["setText"], typecheckCode: [], showUI: [], subscribeToCanvasRoot: [], subscribeToColorStyles: [], subscribeToCustomCode: [], subscribeToImage: [], subscribeToPublishInfo: [], subscribeToSelection: [], subscribeToText: [], subscribeToTextStyles: [], createCodeFile: ["createCodeFile"], unstable_ensureMinimumDependencyVersion: ["unstable_ensureMinimumDependencyVersion"], getCodeFiles: [], getCodeFile: [], subscribeToCodeFiles: [], subscribeToOpenCodeFile: [], uploadFile: [], uploadFiles: [], uploadImage: [], uploadImages: [], zoomIntoView: [], navigateTo: [], getVectorSets: [], "VectorSet.getItems": [], "VectorSetItem.getVariables": [], "Node.navigateTo": [], "CodeFile.navigateTo": [], "Collection.navigateTo": [], "ManagedCollection.navigateTo": [], "CollectionItem.navigateTo": [], "ComponentInstanceNode.getRuntimeError": [], "ImageAsset.cloneWithAttributes": [], "ImageAsset.getData": [], "ImageAsset.loadBitmap": [], "ImageAsset.loadImage": [], "ImageAsset.measure": [], "CodeFile.remove": ["removeCodeFile"], "CodeFile.rename": ["renameCodeFile"], "CodeFile.setFileContent": ["setCodeFileContent"], "CodeFile.getVersions": [], "CodeFile.showProgressOnInstances": [], "CodeFile.removeProgressFromInstances": [], "CodeFile.lint": [], "CodeFile.typecheck": [], "CodeFileVersion.getContent": [], "ComponentInstancePlaceholder.setAttributes": [], "ComponentInstancePlaceholder.remove": [], "ComponentInstancePlaceholder.replaceWithComponentInstance": ["replaceComponentInstancePlaceholderWithComponentInstance"], "Field.remove": ["removeCollectionFields"], "Field.setAttributes": ["addCollectionFields"], "EnumCase.remove": ["removeEnumCase"], "EnumCase.setAttributes": ["updateEnumCase"], "EnumField.addCase": ["addEnumCase"], "EnumField.setCaseOrder": ["setEnumCaseOrder"], "Collection.addFields": ["addCollectionFields"], "Collection.addItems": ["addCollectionItems2"], "Collection.getFields": [], "Collection.getItems": [], "Collection.getPluginData": [], "Collection.getPluginDataKeys": [], "Collection.removeFields": ["removeCollectionFields"], "Collection.removeItems": ["removeCollectionItems"], "Collection.setAsActive": [], "Collection.setFieldOrder": ["setCollectionFieldOrder"], "Collection.setItemOrder": ["setCollectionItemOrder"], "Collection.setPluginData": ["setPluginDataForNode"], "CollectionItem.getPluginData": [], "CollectionItem.getPluginDataKeys": [], "CollectionItem.remove": ["removeCollectionItems"], "CollectionItem.setAttributes": ["setCollectionItemAttributes2"], "CollectionItem.setPluginData": ["setPluginDataForNode"], "ManagedCollection.addItems": ["addManagedCollectionItems2"], "ManagedCollection.getFields": [], "ManagedCollection.getItemIds": [], "ManagedCollection.getPluginData": [], "ManagedCollection.getPluginDataKeys": [], "ManagedCollection.removeItems": ["removeManagedCollectionItems"], "ManagedCollection.setAsActive": [], "ManagedCollection.setFields": ["setManagedCollectionFields"], "ManagedCollection.setItemOrder": ["setManagedCollectionItemOrder"], "ManagedCollection.setPluginData": ["setPluginDataForNode"], "Node.clone": ["cloneNode"], "Node.getChildren": [], "Node.getNodesWithAttribute": [], "Node.getNodesWithAttributeSet": [], "Node.getNodesWithType": [], "Node.getParent": [], "Node.getPluginData": [], "Node.getPluginDataKeys": [], "Node.getRect": [], "Node.remove": ["removeNodes2"], "Node.select": [], "Node.setAttributes": ["setAttributes"], "Node.setPluginData": ["setPluginDataForNode"], "Node.walk": [], "Node.zoomIntoView": [], "TextNode.getText": [], "TextNode.setText": ["setTextForNode"], "TextNode.setHTML": [G], "TextNode.getHTML": [], "ComponentNode.addVariant": ["addVariantToComponent"], "ComponentNode.addGestureVariant": ["addGestureVariantToComponent"], "ComponentNode.getVariables": [], "ComponentNode.addVariables": ["addVariables"], "ComponentNode.removeVariables": ["removeVariables"], "WebPageNode.getBreakpointSuggestions": [], "WebPageNode.addBreakpoint": ["addBreakpointToWebPage"], "ColorStyle.getPluginData": [], "ColorStyle.getPluginDataKeys": [], "ColorStyle.remove": ["removeColorStyle"], "ColorStyle.setAttributes": ["setColorStyleAttributes"], "ColorStyle.setPluginData": ["setPluginDataForNode"], "TextStyle.getPluginData": [], "TextStyle.getPluginDataKeys": [], "TextStyle.remove": ["removeTextStyle"], "TextStyle.setAttributes": ["setTextStyleAttributes"], "TextStyle.setPluginData": ["setPluginDataForNode"], "ComponentVariable.remove": ["removeVariables"], [gt]: [], [yt]: [], [ht]: [], [ft]: [] };
var Je = [];
for (let i12 of Object.keys(ge)) ge[i12].length !== 0 && Je.push(i12);
g(Je);
function Ht(i12) {
  let e = {};
  for (let t of Je) {
    let n = ge[t];
    e[t] = n.every((o) => i12[o]);
  }
  return e;
}
function Cn() {
  let i12 = {};
  for (let e of Je) i12[e] = true;
  return i12;
}
var X = null;
function bn(i12) {
  if (!X) {
    let t = document.createElement("style");
    document.head.appendChild(t), X = t.sheet;
  }
  if (!X) {
    i12();
    return;
  }
  let e = X.insertRule("* { transition: none !important; animation: none !important; }");
  i12(), requestAnimationFrame(() => {
    requestAnimationFrame(() => {
      X && X.deleteRule(e);
    });
  });
}
var Qe = class {
  methodInvocationId = 0;
  notificationId = 0;
  postMessage;
  methodResponseHandlers = /* @__PURE__ */ new Map();
  mode;
  subscriptions = /* @__PURE__ */ new Map();
  perMethodPermissionMap;
  permissionSubscriptions = /* @__PURE__ */ new Set();
  messageTypesCheckedInIsAllowedTo = /* @__PURE__ */ new Set();
  showUncheckedPermissionToasts = true;
  environmentInfo = null;
  menuItemOnActionCallbackMap = /* @__PURE__ */ new Map();
  contextMenuItemOnActionCallbackMap = /* @__PURE__ */ new Map();
  constructor(e) {
    if (!e) {
      this.postMessage = () => {
      }, this.mode = "canvas", this.perMethodPermissionMap = Cn(), typeof window > "u" && console.warn("Framer Plugin API is not supported in non-browser environments");
      return;
    }
    window.addEventListener("message", this.onMessage), window.addEventListener("error", (d) => {
      d.error instanceof M && (d.preventDefault(), d.stopImmediatePropagation());
    }), window.addEventListener("unhandledrejection", (d) => {
      d.reason instanceof M && (d.preventDefault(), d.stopImmediatePropagation());
    });
    let { origin: t, pluginReadyResponse: { mode: n, theme: o, permissionMap: r, environmentInfo: a } } = e;
    this.environmentInfo = a, this.postMessage = (d, z) => window.parent.postMessage(d, t, z), this.mode = n, this.applyPluginTheme(o), this.subscribe("theme", this.applyPluginTheme), this.perMethodPermissionMap = Ht(r), window.addEventListener("pointerdown", () => {
      this.invoke("onPointerDown");
    });
  }
  async invoke(e, ...t) {
    return this.invokeTransferable(e, void 0, ...t);
  }
  async invokeTransferable(e, t, ...n) {
    if (fn(e) && !this.messageTypesCheckedInIsAllowedTo.has(e)) {
      let o = `Invoking protected message type "${e}" without checking permissions first`;
      this.showUncheckedPermissionToasts && this.notify(o), console.error(o);
    }
    return new Promise((o, r) => {
      let a = { type: "methodInvocation", methodName: e, id: this.methodInvocationId, args: n.map(q) };
      this.methodInvocationId += 1, this.methodResponseHandlers.set(a.id, { resolve: o, reject: r }), this.postMessage(a, t);
    });
  }
  subscribe(e, t) {
    this.postMessage({ type: "subscribe", topic: e });
    let n = this.subscriptions.get(e) ?? /* @__PURE__ */ new Set();
    return n.add(t), this.subscriptions.set(e, n), () => {
      let o = this.subscriptions.get(e) ?? /* @__PURE__ */ new Set();
      o.delete(t), o.size === 0 && this.postMessage({ type: "unsubscribe", topic: e }), this.subscriptions.set(e, o);
    };
  }
  onMessage = (e) => {
    let t = e.data;
    if (vi(t)) switch (t.type) {
      case "permissionUpdate": {
        this.perMethodPermissionMap = Ht(t.permissionMap);
        for (let n of this.permissionSubscriptions) n();
        break;
      }
      case "methodResponse": {
        let n = this.methodResponseHandlers.get(t.id);
        if (!n) throw new Error(`No handler for response with id ${t.id}`);
        this.methodResponseHandlers.delete(t.id), l(t.error) ? n.reject(new oe(t.error)) : n.resolve(t.result);
        break;
      }
      case "subscriptionMessage": {
        let { topic: n, payload: o } = t, r = this.subscriptions.get(n);
        if (!r) throw new Error("Received a subscription message but no handler present");
        for (let a of r) a(o);
        break;
      }
      case "menuAction": {
        let n = this.getOnActionFromCallbackMap(t.actionId, t.actionType);
        if (!n) throw new Error("Menu action received for an unknown menu item");
        n();
        break;
      }
      default:
        ie(t);
    }
  };
  getOnActionFromCallbackMap(e, t) {
    switch (t) {
      case "pluginMenu":
        return this.menuItemOnActionCallbackMap.get(e);
      case "contextMenu":
        return this.contextMenuItemOnActionCallbackMap.get(e);
      default:
        ie(t);
    }
  }
  applyPluginTheme = (e) => {
    bn(() => {
      document.body.setAttribute("data-framer-theme", e.mode);
      for (let t in e.tokens) document.body.style.setProperty(t, e.tokens[t]);
    });
  };
  async cloneNode(e) {
    let t = await this.invoke("cloneNode", e);
    return t ? c(t, this) : null;
  }
  async setAttributes(e, t) {
    let n = await this.invoke("setAttributes", e, t);
    return n ? c(n, this) : null;
  }
  async getParent(e) {
    let t = await this.invoke("getParent", e);
    return t ? c(t, this) : null;
  }
  async getChildren(e) {
    return (await this.invoke("getChildren", e)).map((n) => {
      let o = c(n, this);
      return s(me(o)), o;
    });
  }
  notify = (e, t) => {
    let n = `notification-${this.notificationId}`;
    return this.notificationId += 1, this.invoke("notify", e, { notificationId: n, variant: t?.variant ?? "info", buttonText: t?.button?.text, durationMs: t?.durationMs }).then((o) => {
      o === "actionButtonClicked" && t?.button?.onClick && t.button.onClick(), t?.onDisappear && t.onDisappear();
    }), { close: () => this.invoke("closeNotification", n) };
  };
  async setMenu(e) {
    this.menuItemOnActionCallbackMap = /* @__PURE__ */ new Map();
    let t = Le(e, this.menuItemOnActionCallbackMap);
    await this.invoke("setMenu", t);
  }
  async showContextMenu(e, t) {
    this.contextMenuItemOnActionCallbackMap = /* @__PURE__ */ new Map();
    let n = Le(e, this.contextMenuItemOnActionCallbackMap);
    await this.invoke("showContextMenu", n, t);
  }
};
function io(i12) {
  return i12.type === "component";
}
function no(i12) {
  return i12.type === "override";
}
var _t = class {
  #e;
  #t;
  get id() {
    return this.#e.id;
  }
  get name() {
    return this.#e.name;
  }
  get createdAt() {
    return this.#e.createdAt;
  }
  get createdBy() {
    return this.#e.createdBy;
  }
  constructor(e, t) {
    this.#t = t, this.#e = e;
  }
  async getContent() {
    return await this.#t.invoke("getCodeFileVersionContent", this.#e.fileId, this.#e.id);
  }
};
var R = class i7 {
  #e;
  #t;
  get id() {
    return this.#e.id;
  }
  get name() {
    return this.#e.name;
  }
  get path() {
    return this.#e.path;
  }
  get content() {
    return this.#e.content;
  }
  get exports() {
    return this.#e.exports;
  }
  get versionId() {
    return this.#e.versionId;
  }
  constructor(e, t) {
    this.#t = t, this.#e = e;
  }
  async setFileContent(e) {
    let t = await this.#t.invoke("setCodeFileContent", this.id, e);
    return new i7(t, this.#t);
  }
  async rename(e) {
    let t = await this.#t.invoke("renameCodeFile", this.id, e);
    return new i7(t, this.#t);
  }
  async remove() {
    return this.#t.invoke("removeCodeFile", this.id);
  }
  async getVersions() {
    return (await this.#t.invoke("getCodeFileVersions", this.id)).map((t) => new _t(t, this.#t));
  }
  async showProgressOnInstances(e) {
    return this.#t.invoke("showProgressOnInstances", this.id, e);
  }
  async removeProgressFromInstances() {
    return this.#t.invoke("removeProgressFromInstances", this.id);
  }
  async lint(e) {
    return await this.#t.invoke("lintCode", this.name, this.content, e);
  }
  async typecheck(e) {
    return await this.#t.invoke("typecheckCode", this.name, this.content, e);
  }
  async navigateTo() {
    return this.#t.invoke("navigateTo", this.id);
  }
};
var N = class {
  #e;
  #t;
  #i;
  get id() {
    return this.#i.id;
  }
  get name() {
    return this.#i.name;
  }
  constructor(e, t, n) {
    this.#e = e, this.#t = t, this.#i = n;
  }
  async setAttributes(e) {
    let t = { ...e, type: this.type, id: this.id }, [n] = await this.#e.invoke("addCollectionFields2", this.#t, [t]);
    if (s(Ne(n)), u(n)) return null;
    s(n.type === this.type);
    let o = this.constructor;
    return new o(this.#e, this.#t, n);
  }
  async remove() {
    await this.#e.invoke("removeCollectionFields", this.#t, [this.id]);
  }
};
var P = class extends N {
  #e;
  get required() {
    return this.#e.required;
  }
  constructor(e, t, n) {
    super(e, t, n), this.#e = n;
  }
};
var et = class extends N {
  type = qt;
};
var tt = class extends N {
  type = $t;
};
var it = class extends N {
  type = Xt;
};
var nt = class extends P {
  type = Yt;
  #e;
  constructor(e, t, n) {
    super(e, t, n), this.#e = n;
  }
  get basedOn() {
    return this.#e.basedOn;
  }
};
var ot = class extends P {
  type = Zt;
};
var ye = class extends P {
  type = Jt;
};
var rt = class extends P {
  type = ei;
};
var at = class extends P {
  type = ti;
};
var st = class extends N {
  type = ai;
};
var he = class extends N {
  type = si;
};
var lt = class extends P {
  type = ii;
  #e;
  get allowedFileTypes() {
    return this.#e.allowedFileTypes;
  }
  constructor(e, t, n) {
    super(e, t, n), this.#e = n;
  }
};
var fe = class i8 {
  #e;
  #t;
  #i;
  #n;
  get id() {
    return this.#t.id;
  }
  get name() {
    return this.#t.name;
  }
  get nameByLocale() {
    return this.#t.nameByLocale;
  }
  constructor(e, t, n, o) {
    this.#e = e, this.#i = t, this.#n = n, this.#t = o;
  }
  async setAttributes(e) {
    let t = await this.#e.invoke("updateEnumCase", this.#i, this.#n, this.id, e);
    return t ? new i8(this.#e, this.#i, this.#n, t) : null;
  }
  async remove() {
    await this.#e.invoke("removeEnumCase", this.#i, this.#n, this.id);
  }
};
var dt = class extends N {
  type = ni;
  #e;
  #t;
  #i;
  #n;
  get cases() {
    return this.#n || (this.#n = this.#t.cases.map((e) => new fe(this.#e, this.#i, this.id, e)), g(this.#n)), this.#n;
  }
  constructor(e, t, n) {
    super(e, t, n), this.#e = e, this.#t = n, this.#i = t;
  }
  async addCase(e) {
    let t = await this.#e.invoke("addEnumCase", this.#i, this.id, e);
    return t ? new fe(this.#e, this.#i, this.id, t) : null;
  }
  async setCaseOrder(e) {
    await this.#e.invoke("setEnumCaseOrder", this.#i, this.id, e);
  }
};
var ct = class extends P {
  type = oi;
  #e;
  get collectionId() {
    return this.#e.collectionId;
  }
  constructor(e, t, n) {
    super(e, t, n), this.#e = n;
  }
};
var ut = class extends P {
  type = ri;
  #e;
  get collectionId() {
    return this.#e.collectionId;
  }
  constructor(e, t, n) {
    super(e, t, n), this.#e = n;
  }
};
var Kt = class extends P {
  type = Qt;
  fields;
  constructor(e, t, n) {
    super(e, t, n);
    let o = n.fields[0];
    this.fields = [new ye(e, t, o)];
  }
};
function jt(i12, e, t) {
  return i12.map((n) => {
    switch (n.type) {
      case qt:
        return new et(e, t, n);
      case $t:
        return new tt(e, t, n);
      case Xt:
        return new it(e, t, n);
      case Yt:
        return new nt(e, t, n);
      case Zt:
        return new ot(e, t, n);
      case Jt:
        return new ye(e, t, n);
      case ei:
        return new rt(e, t, n);
      case ti:
        return new at(e, t, n);
      case ai:
        return new st(e, t, n);
      case si:
        return new he(e, t, n);
      case ii:
        return new lt(e, t, n);
      case ni:
        return new dt(e, t, n);
      case oi:
        return new ct(e, t, n);
      case ri:
        return new ut(e, t, n);
      case Qt:
        return new Kt(e, t, n);
      default:
        return new he(e, t, n);
    }
  });
}
function oo(i12) {
  return i12 instanceof N;
}
var In = "action";
function ro(i12) {
  return !!i12 && In in i12 && l(i12[In]);
}
function Tn(i12) {
  return Object.keys(i12).reduce((e, t) => {
    let n = i12[t];
    return ro(n) && (e[t] = n), e;
  }, {});
}
var ao = { array: false, boolean: false, collectionReference: false, color: false, date: false, enum: false, file: false, formattedText: false, image: true, link: false, multiCollectionReference: false, number: false, string: false, unsupported: false };
function so(i12) {
  return ao[i12];
}
function lo(i12) {
  return so(i12.type);
}
var qt = "boolean";
var $t = "color";
var Xt = "number";
var Yt = "string";
var Zt = "formattedText";
var Jt = "image";
var Qt = "array";
var ei = "link";
var ti = "date";
var ii = "file";
var ni = "enum";
var oi = "collectionReference";
var ri = "multiCollectionReference";
var ai = "divider";
var si = "unsupported";
function co(i12) {
  return i12.map((e) => {
    if (e.type !== "enum") return e;
    let t = e.cases.map((n) => {
      let o = n.nameByLocale ? Tn(n.nameByLocale) : void 0;
      return { ...n, nameByLocale: o };
    });
    return { ...e, cases: t };
  });
}
function Fn(i12, e) {
  let t = {};
  for (let n in i12) {
    let o = i12[n];
    if (o) switch (o.type) {
      case "image":
        if (_(o.value)) {
          t[n] = { ...o, value: new h(o.value, e) };
          break;
        }
        t[n] = { ...o, value: o.value };
        break;
      case "file":
        if (ve(o.value)) {
          t[n] = { ...o, value: new S(o.value) };
          break;
        }
        t[n] = { ...o, value: o.value };
        break;
      case "color":
        if (x(o.value)) {
          t[n] = { ...o, value: new f(o.value, e) };
          break;
        }
        t[n] = { ...o, value: o.value };
        break;
      case "array": {
        let r = o.value.map((a) => {
          let d = Fn(a.fieldData, e), z = {};
          for (let k in d) {
            let A = d[k];
            s(A && lo(A), "Unsupported array item field data entry"), z[k] = A;
          }
          return { ...a, fieldData: z };
        });
        t[n] = { ...o, value: r };
        break;
      }
      default:
        t[n] = o;
    }
  }
  return t;
}
var Ce = class {
  id;
  name;
  readonly;
  managedBy;
  #e;
  constructor(e, t) {
    this.id = e.id, this.name = e.name, this.readonly = e.readonly, s(e.managedBy !== "user", "Managed Collection can only be managed by a plugin"), this.managedBy = e.managedBy, this.#e = t, g(this);
  }
  async getItemIds() {
    return this.#e.invoke("getManagedCollectionItemIds", this.id);
  }
  async setItemOrder(e) {
    return this.#e.invoke("setManagedCollectionItemOrder", this.id, e);
  }
  async getFields() {
    return this.#e.invoke("getManagedCollectionFields2", this.id);
  }
  async setFields(e) {
    let t = co(e);
    return this.#e.invoke("setManagedCollectionFields", this.id, t);
  }
  async addItems(e) {
    return this.#e.invoke("addManagedCollectionItems2", this.id, e);
  }
  async removeItems(e) {
    return this.#e.invoke("removeManagedCollectionItems", this.id, e);
  }
  async setAsActive() {
    return this.#e.invoke("setActiveCollection", this.id);
  }
  async setPluginData(e, t) {
    return this.#e.invoke("setPluginDataForNode", this.id, e, t);
  }
  async getPluginData(e) {
    return this.#e.invoke("getPluginDataForNode", this.id, e);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeysForNode", this.id);
  }
  async navigateTo(e) {
    return this.#e.invoke("navigateTo", this.id, e);
  }
};
var Y = class {
  id;
  name;
  slugFieldName;
  slugFieldBasedOn;
  readonly;
  managedBy;
  #e;
  constructor(e, t) {
    this.id = e.id, this.name = e.name, this.slugFieldName = e.slugFieldName, this.slugFieldBasedOn = e.slugFieldBasedOn, this.readonly = e.readonly, this.managedBy = e.managedBy, this.#e = t, g(this);
  }
  async setItemOrder(e) {
    return this.#e.invoke("setCollectionItemOrder", this.id, e);
  }
  async getFields() {
    let e = await this.#e.invoke("getCollectionFields2", this.id, true);
    return jt(e, this.#e, this.id);
  }
  async addFields(e) {
    let t = await this.#e.invoke("addCollectionFields2", this.id, e);
    return s(t.every(Ci)), jt(t, this.#e, this.id);
  }
  async removeFields(e) {
    return this.#e.invoke("removeCollectionFields", this.id, e);
  }
  async setFieldOrder(e) {
    return this.#e.invoke("setCollectionFieldOrder", this.id, e);
  }
  async getItems() {
    return (await this.#e.invoke("getCollectionItems2", this.id)).map((t) => new li(t, this.#e));
  }
  async addItems(e) {
    await this.#e.invoke("addCollectionItems2", this.id, e);
  }
  async removeItems(e) {
    return this.#e.invoke("removeCollectionItems", e);
  }
  async setAsActive() {
    return this.#e.invoke("setActiveCollection", this.id);
  }
  async setPluginData(e, t) {
    return this.#e.invoke("setPluginDataForNode", this.id, e, t);
  }
  async getPluginData(e) {
    return this.#e.invoke("getPluginDataForNode", this.id, e);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeysForNode", this.id);
  }
  async navigateTo(e) {
    return this.#e.invoke("navigateTo", this.id, e);
  }
};
var li = class i9 {
  id;
  nodeId;
  slug;
  slugByLocale;
  draft;
  fieldData;
  #e;
  constructor(e, t) {
    let n = Fn(e.fieldData, t);
    this.id = e.externalId ?? e.nodeId, this.nodeId = e.nodeId, this.slug = e.slug, this.slugByLocale = e.slugByLocale, this.draft = e.draft ?? false, this.fieldData = n, this.#e = t, g(this);
  }
  async remove() {
    return this.#e.invoke("removeCollectionItems", [this.id]);
  }
  async setAttributes(e) {
    let t = await this.#e.invoke("setCollectionItemAttributes2", this.id, e);
    return t ? new i9(t, this.#e) : null;
  }
  async setPluginData(e, t) {
    return this.#e.invoke("setPluginDataForNode", this.id, e, t);
  }
  async getPluginData(e) {
    return this.#e.invoke("getPluginDataForNode", this.id, e);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeysForNode", this.id);
  }
  async navigateTo(e) {
    return this.#e.invoke("navigateTo", this.nodeId, e);
  }
};
var pt = class i10 {
  #e;
  #t;
  constructor(e, t) {
    this.#e = e, this.#t = t;
  }
  get id() {
    return this.#e.id;
  }
  get width() {
    return this.#e.width;
  }
  get height() {
    return this.#e.height;
  }
  get title() {
    return this.#e.title;
  }
  get codePreview() {
    return this.#e.codePreview;
  }
  async setAttributes(e) {
    let t = await this.#t.invoke("updateComponentInstancePlaceholder", this.id, e);
    return t ? new i10(t, this.#t) : null;
  }
  async remove() {
    await this.#t.invoke("removeComponentInstancePlaceholder", this.id);
  }
  async replaceWithComponentInstance(e, t) {
    let n = await this.#t.invoke("replaceComponentInstancePlaceholderWithComponentInstance", this.id, e, t);
    if (!n) return null;
    let o = c(n, this.#t);
    return s($(o)), o;
  }
};
var uo = /* @__PURE__ */ (() => {
  let i12 = null;
  return { disableUntilMouseUp: () => {
    if (i12) return;
    i12 = document.createElement("style"), i12.textContent = "* { pointer-events: none !important; user-select: none !important; -webkit-user-select: none !important; }", document.head.appendChild(i12);
    let e = () => {
      i12 && (document.head.removeChild(i12), i12 = null, o());
    }, t = (r) => {
      r.buttons > 0 && r.buttons & 1 || e();
    }, n = () => {
      e();
    };
    window.addEventListener("pointerup", t, true), window.addEventListener("pointermove", t, true), window.addEventListener("blur", n);
    function o() {
      window.removeEventListener("pointerup", t, true), window.removeEventListener("pointermove", t, true), window.removeEventListener("blur", n);
    }
  } };
})();
var xn = 5;
var po = /* @__PURE__ */ (() => {
  let i12 = 1;
  return { next: () => `drag-${i12++}` };
})();
function mo() {
}
function Pn(i12, e, t, n) {
  if (i12.mode !== "canvas") return mo;
  let o = po.next(), r = document.body.style.cursor, a = { type: "idle" }, d = document.body, z = b.subscribeToIsAllowedTo("makeDraggable", (y) => {
    y || hi();
  }), k = (y) => {
    b.isAllowedTo("makeDraggable") && a.type !== "idle" && (a.type === "dragging" && i12.invoke("onDragEnd", { ...y, dragSessionId: o }).then((I) => {
      try {
        n?.(I);
      } catch {
      }
    }).catch((I) => {
      if (I instanceof Error) {
        n?.({ status: "error", reason: I.message });
        return;
      }
      if (typeof I == "string") {
        n?.({ status: "error", reason: I });
        return;
      }
      n?.({ status: "error" });
    }), hi());
  }, A = (y) => {
    if (!b.isAllowedTo("makeDraggable") || a.type === "idle") return;
    if (!(y.buttons > 0 && !!(y.buttons & 1))) {
      k({ cancelled: false });
      return;
    }
    let { clientX: Te, clientY: J } = y;
    if (a.type === "pointerDown") {
      let Q = Te - a.dragStart.mouse.x, fi = J - a.dragStart.mouse.y;
      if (Math.abs(Q) < xn && Math.abs(fi) < xn) return;
      a = { type: "dragging", dragStart: a.dragStart }, i12.invoke("onDragStart", a.dragStart), document.getSelection()?.empty(), uo.disableUntilMouseUp();
    }
    d.setPointerCapture(y.pointerId);
    let Fe = { x: Te, y: J };
    i12.invoke("onDrag", { dragSessionId: o, mouse: Fe }).then((Q) => {
      a.type === "dragging" && (document.body.style.cursor = Q ?? "");
    });
  }, pi = (y) => {
    y.key === "Escape" && k({ cancelled: true });
  }, mi = () => {
    k({ cancelled: true });
  }, gi = (y) => {
    if (!b.isAllowedTo("makeDraggable")) return;
    k({ cancelled: true });
    let I = e.getBoundingClientRect(), Te = { x: I.x, y: I.y, width: I.width, height: I.height }, J, Fe = e.querySelectorAll("svg");
    if (Fe.length === 1) {
      let xe = Fe.item(0).getBoundingClientRect();
      J = { x: xe.x, y: xe.y, width: xe.width, height: xe.height };
    }
    let Q = { x: y.clientX, y: y.clientY };
    a = { type: "pointerDown", dragStart: { dragSessionId: o, elementRect: Te, svgRect: J, mouse: Q } }, i12.invoke("setDragData", o, t()), d.addEventListener("pointermove", A, true), d.addEventListener("pointerup", A, true), window.addEventListener("keydown", pi, true), window.addEventListener("blur", mi);
  }, yi = () => {
    if (!b.isAllowedTo("makeDraggable")) return;
    let y = t();
    y.type === "detachedComponentLayers" && i12.invoke("preloadDetachedComponentLayers", y.url), y.type === "image" && i12.invoke("preloadImageUrlForInsertion", y.image), y.previewImage && i12.invoke("preloadDragPreviewImage", y.previewImage);
  };
  e.addEventListener("pointerdown", gi), e.addEventListener("mouseenter", yi);
  function hi() {
    a = { type: "idle" }, document.body.style.cursor = r, d.removeEventListener("pointermove", A, true), d.removeEventListener("pointerup", A, true), window.removeEventListener("keydown", pi, true), window.removeEventListener("blur", mi);
  }
  return () => {
    e.removeEventListener("pointerdown", gi), e.removeEventListener("mouseenter", yi), k({ cancelled: true }), z();
  };
}
var Z = class i11 {
  #e;
  #t;
  get id() {
    return this.#e.id;
  }
  get from() {
    return this.#e.from;
  }
  get to() {
    return this.#e.to;
  }
  get expandToAllLocales() {
    return this.#e.expandToAllLocales;
  }
  constructor(e, t) {
    this.#t = t, this.#e = e;
  }
  remove() {
    return this.#t.invoke("removeRedirects", [this.id]);
  }
  async setAttributes(e) {
    let t = { ...e, id: this.id }, [n] = await this.#t.invoke("addRedirects", [t]);
    return s(Ne(n)), u(n) ? null : new i11(n, this.#t);
  }
};
var be = class {
  id;
  name;
  owner;
  #e;
  constructor(e, t) {
    this.id = e.id, this.name = e.name, this.owner = e.owner, this.#e = t;
  }
  async getItems() {
    return (await this.#e.invoke("getVectorSetItems", this.id)).map((t) => new mt(t, this.#e));
  }
};
var mt = class {
  id;
  name;
  insertUrl;
  iconUrl;
  #e;
  #t;
  constructor(e, t) {
    this.id = e.id, this.name = e.name, this.insertUrl = e.insertUrl, this.iconUrl = e.iconUrl, this.#e = e.moduleId, this.#t = t;
  }
  async getVariables() {
    return this.#t.invoke("getVectorSetItemVariables", this.id, this.#e);
  }
};
var Ie = class {
  #e;
  constructor(e) {
    this.#e = e;
  }
  get mode() {
    return this.#e.mode;
  }
  isAllowedTo(...e) {
    if (true) for (let t of e) for (let n of ge[t]) this.#e.messageTypesCheckedInIsAllowedTo.add(n);
    return e.every((t) => this.#e.perMethodPermissionMap[t]);
  }
  subscribeToIsAllowedTo(...e) {
    let [t, n] = Ti(e), o = this.isAllowedTo(...t), r = () => {
      let a = this.isAllowedTo(...t);
      a !== o && (o = a, n(o));
    };
    return this.#e.permissionSubscriptions.add(r), () => {
      this.#e.permissionSubscriptions.delete(r);
    };
  }
  async showUI(e) {
    return this.#e.invoke("showUI", e);
  }
  async hideUI() {
    return this.#e.invoke("hideUI");
  }
  closePlugin(e, t) {
    throw this.#e.invoke("closePlugin", e, t), new M();
  }
  async getCurrentUser() {
    return this.#e.invoke("getCurrentUser2");
  }
  async getProjectInfo() {
    return this.#e.invoke("getProjectInfo2");
  }
  async getSelection() {
    return (await this.#e.invoke("getSelection")).map((t) => {
      let n = c(t, this.#e);
      return s(me(n)), n;
    });
  }
  async setSelection(e) {
    let t = l(e) ? [e] : Array.from(e);
    return this.#e.invoke("setSelection", t);
  }
  subscribeToSelection(e) {
    return this.#e.subscribe("selection", (t) => {
      let n = t.map((o) => {
        let r = c(o, this.#e);
        return s(me(r)), r;
      });
      e(n);
    });
  }
  async getCanvasRoot() {
    let e = await this.#e.invoke("getCanvasRoot"), t = c(e, this.#e);
    return s(Gt(t)), t;
  }
  subscribeToCanvasRoot(e) {
    return this.#e.subscribe("canvasRoot", (t) => {
      let n = c(t, this.#e);
      s(Gt(n)), e(n);
    });
  }
  async getPublishInfo() {
    return this.#e.invoke("getPublishInfo");
  }
  subscribeToPublishInfo(e) {
    return this.#e.subscribe("publishInfo", e);
  }
  async createFrameNode(e, t) {
    let n = await this.#e.invoke("createNode", "FrameNode", t ?? null, e);
    if (!n) return null;
    let o = c(n, this.#e);
    return s(o instanceof D), o;
  }
  async removeNodes(e) {
    return this.#e.invoke("removeNodes2", e);
  }
  async removeNode(e) {
    return this.removeNodes([e]);
  }
  async cloneNode(e) {
    return this.#e.cloneNode(e);
  }
  async getNode(e) {
    let t = await this.#e.invoke("getNode", e);
    return t ? c(t, this.#e) : null;
  }
  async getParent(e) {
    return this.#e.getParent(e);
  }
  async getChildren(e) {
    return this.#e.getChildren(e);
  }
  async getRect(e) {
    return this.#e.invoke("getRect", e);
  }
  async zoomIntoView(e, t) {
    let n = l(e) ? [e] : Array.from(e);
    return this.#e.invoke("zoomIntoView", n, t);
  }
  async setAttributes(e, t) {
    return this.#e.setAttributes(e, t);
  }
  async setParent(e, t, n) {
    return this.#e.invoke("setParent", e, t, n);
  }
  async getNodesWithType(e) {
    return (await this.#e.invoke("getNodesWithType", null, e)).map((n) => c(n, this.#e));
  }
  async getNodesWithAttribute(e) {
    return (await this.#e.invoke("getNodesWithAttribute", null, e)).map((n) => c(n, this.#e));
  }
  async getNodesWithAttributeSet(e) {
    return (await this.#e.invoke("getNodesWithAttributeSet", null, e)).map((n) => c(n, this.#e));
  }
  async getImage() {
    let e = await this.#e.invoke("getImage");
    return e ? new h(e, this.#e) : null;
  }
  subscribeToImage(e) {
    return this.#e.subscribe("image", (t) => {
      if (!t) {
        e(null);
        return;
      }
      e(new h(t, this.#e));
    });
  }
  async addImage(e) {
    let t = await ne(e), n = W(t);
    return this.#e.invokeTransferable("addImage", n, t);
  }
  async setImage(e) {
    let t = await ne(e), n = W(t);
    return this.#e.invokeTransferable("setImage", n, t);
  }
  async uploadImage(e) {
    let t = await ne(e), n = W(t), o = await this.#e.invokeTransferable("uploadImage", n, t);
    return new h(o, this.#e);
  }
  async addImages(e) {
    let t = await It(e), n = t.flatMap(W);
    await this.#e.invokeTransferable("addImages", n, t);
  }
  async uploadImages(e) {
    let t = await It(e), n = t.flatMap(W), o = await this.#e.invokeTransferable("uploadImages", n, t), r = [];
    for (let a of o) r.push(new h(a, this.#e));
    return r;
  }
  async uploadFile(e) {
    let t = await bt(e), n = await this.#e.invokeTransferable("uploadFile", W(t), t);
    return new S(n);
  }
  async uploadFiles(e) {
    let t = await Promise.all(e.map(bt)), n = t.flatMap(W), o = await this.#e.invokeTransferable("uploadFiles", n, t), r = [];
    for (let a of o) r.push(new S(a));
    return r;
  }
  async addSVG(e) {
    return this.#e.invoke("addSVG", e);
  }
  async addComponentInstance({ url: e, attributes: t }) {
    let n = await this.#e.invoke("addComponentInstance", { url: e, attributes: t }), o = c(n, this.#e);
    return s($(o)), o;
  }
  async addDetachedComponentLayers({ url: e, layout: t, attributes: n }) {
    let o = await this.#e.invoke("addDetachedComponentLayers", { url: e, layout: t, attributes: n }), r = c(o, this.#e);
    return s(Ze(r)), r;
  }
  async preloadDetachedComponentLayers(e) {
    await this.#e.invoke("preloadDetachedComponentLayers", e);
  }
  async preloadImageUrlForInsertion(e) {
    await this.#e.invoke("preloadImageUrlForInsertion", e);
  }
  async preloadDragPreviewImage(e) {
    await this.#e.invoke("preloadDragPreviewImage", e);
  }
  async getText() {
    return this.#e.invoke("getText");
  }
  async setText(e) {
    return this.#e.invoke("setText", e);
  }
  async addText(e, t) {
    return this.#e.invoke("addText", e, t);
  }
  async setCustomCode(e) {
    return this.#e.invoke("setCustomCode", e);
  }
  async getCustomCode() {
    return this.#e.invoke("getCustomCode");
  }
  subscribeToCustomCode(e) {
    return this.#e.subscribe("customCode", e);
  }
  subscribeToText(e) {
    return this.#e.subscribe("text", e);
  }
  makeDraggable(e, t, n) {
    return Pn(this.#e, e, t, n);
  }
  async getActiveManagedCollection() {
    let e = await this.#e.invoke("getActiveManagedCollection");
    return s(e, "Collection data must be defined"), new Ce(e, this.#e);
  }
  async getManagedCollection() {
    return this.getActiveManagedCollection();
  }
  async getManagedCollections() {
    let e = await this.#e.invoke("getManagedCollections");
    return s(e, "Collections data must be defined"), e.map((t) => new Ce(t, this.#e));
  }
  async getCollection(e) {
    let t = await this.#e.invoke("getCollection", e);
    return t ? new Y(t, this.#e) : null;
  }
  async getActiveCollection() {
    let e = await this.#e.invoke("getActiveCollection");
    return e ? new Y(e, this.#e) : null;
  }
  async getCollections() {
    return (await this.#e.invoke("getCollections")).map((t) => new Y(t, this.#e));
  }
  notify = (e, t) => this.#e.notify(e, t);
  async getPluginData(e) {
    return this.#e.invoke("getPluginData", e);
  }
  async setPluginData(e, t) {
    return this.#e.invoke("setPluginData", e, t);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeys");
  }
  async getColorStyles() {
    return (await this.#e.invoke("getColorStyles")).map((t) => new f(t, this.#e));
  }
  async getColorStyle(e) {
    let t = await this.#e.invoke("getColorStyle", e);
    return t ? new f(t, this.#e) : null;
  }
  async createColorStyle(e) {
    let t = await this.#e.invoke("createColorStyle", e);
    return new f(t, this.#e);
  }
  subscribeToColorStyles(e) {
    return this.#e.subscribe("colorStyles", (t) => {
      let n = t.map((o) => new f(o, this.#e));
      return e(n);
    });
  }
  async getTextStyles() {
    return (await this.#e.invoke("getTextStyles")).map((t) => new T(t, this.#e));
  }
  async getTextStyle(e) {
    let t = await this.#e.invoke("getTextStyle", e);
    return t ? new T(t, this.#e) : null;
  }
  async createTextStyle(e) {
    let t = await this.#e.invoke("createTextStyle", e);
    return new T(t, this.#e);
  }
  subscribeToTextStyles(e) {
    return this.#e.subscribe("textStyles", (t) => {
      let n = t.map((o) => new T(o, this.#e));
      return e(n);
    });
  }
  async getFont(e, t) {
    let n = await this.#e.invoke("getFont", e, t);
    return n ? w(n) : null;
  }
  async getFonts() {
    return (await this.#e.invoke("getFonts")).map(w);
  }
  getLocales() {
    return this.#e.invoke("getLocales");
  }
  getDefaultLocale() {
    return this.#e.invoke("getDefaultLocale");
  }
  getActiveLocale() {
    return this.#e.invoke("getActiveLocale");
  }
  async getLocalizationGroups() {
    return this.#e.invoke("getLocalizationGroups");
  }
  setLocalizationData(e) {
    return this.#e.invoke("setLocalizationData", e);
  }
  async getRedirects() {
    return (await this.#e.invoke("getRedirects")).map((t) => new Z(t, this.#e));
  }
  subscribeToRedirects(e) {
    return this.#e.subscribe("redirects", (t) => {
      let n = t.map((o) => new Z(o, this.#e));
      return e(n);
    });
  }
  async addRedirects(e) {
    return (await this.#e.invoke("addRedirects", e)).map((n) => new Z(n, this.#e));
  }
  async removeRedirects(e) {
    return this.#e.invoke("removeRedirects", e);
  }
  async setRedirectOrder(e) {
    return this.#e.invoke("setRedirectOrder", e);
  }
  async createCodeFile(e, t) {
    let n = await this.#e.invoke("createCodeFile", e, t);
    return new R(n, this.#e);
  }
  async getCodeFiles() {
    let e = await this.#e.invoke("getCodeFiles"), t = [];
    for (let n of e) t.push(new R(n, this.#e));
    return t;
  }
  async getCodeFile(e) {
    let t = await this.#e.invoke("getCodeFile", e);
    return t ? new R(t, this.#e) : null;
  }
  lintCode(e, t, n) {
    return this.#e.invoke("lintCode", e, t, n);
  }
  typecheckCode(e, t, n) {
    return this.#e.invoke("typecheckCode", e, t, n);
  }
  subscribeToCodeFiles(e) {
    return this.#e.subscribe("codeFiles", (t) => {
      let n = t?.map((o) => new R(o, this.#e));
      return e(n);
    });
  }
  setMenu(e) {
    return this.#e.setMenu(e);
  }
  showContextMenu(e, t) {
    return this.#e.showContextMenu(e, t);
  }
  async unstable_ensureMinimumDependencyVersion(e, t) {
    return this.#e.invoke("unstable_ensureMinimumDependencyVersion", e, t);
  }
  async navigateTo(e, t) {
    return this.#e.invoke("navigateTo", e, t);
  }
  subscribeToOpenCodeFile(e) {
    return this.#e.subscribe("openCodeFile", (t) => {
      let n = t ? new R(t, this.#e) : null;
      return e(n);
    });
  }
};
var di = class extends Ie {
};
var Sn = class extends di {
  #e;
  constructor(e) {
    super(e), this.#e = e, this.#e;
  }
  async addComponentInstancePlaceholder(e) {
    let t = await this.#e.invoke("addComponentInstancePlaceholder", e);
    return new pt(t, this.#e);
  }
  async [v.getAiServiceInfo]() {
    return this.#e.invoke(Se);
  }
  async [v.sendTrackingEvent](e, t, n) {
    return this.#e.invoke(De, e, t, n);
  }
  async [v.getHTMLForNode](e) {
    return this.#e.invoke(O, e);
  }
  async [v.setHTMLForNode](e, t) {
    return this.#e.invoke(G, e, t);
  }
  get [v.environmentInfo]() {
    return this.#e.environmentInfo;
  }
  get [v.showUncheckedPermissionToasts]() {
    return this.#e.showUncheckedPermissionToasts;
  }
  set [v.showUncheckedPermissionToasts](e) {
    this.#e.showUncheckedPermissionToasts = e;
  }
  async createTextNode(e, t) {
    let n = await this.#e.invoke("createNode", "TextNode", t ?? null, e);
    if (!n) return null;
    let o = c(n, this.#e);
    return s(o instanceof B), o;
  }
  async createComponentNode(e) {
    let t = await this.#e.invoke("createNode", "ComponentNode", null, { name: e });
    if (!t) return null;
    let n = c(t, this.#e);
    return s(n instanceof U), n;
  }
  async getVectorSets() {
    return (await this.#e.invoke("getVectorSets")).map((t) => new be(t, this.#e));
  }
};
async function go() {
  if (!(typeof window > "u")) return new Promise((i12) => {
    function e({ data: t, origin: n }) {
      ki(t) && (window.removeEventListener("message", e), i12({ origin: n, pluginReadyResponse: t }));
    }
    window.addEventListener("message", e), window.parent.postMessage(Ni, "*");
  });
}
var yo = await go();
var b = new Ie(new Qe(yo));
function ci(...i12) {
  let [e, t] = (0, import_react3.useState)(() => b.isAllowedTo(...i12)), [n, o] = (0, import_react3.useState)(i12);
  return Ii(i12, n) || (t(b.isAllowedTo(...i12)), o(i12)), (0, import_react3.useEffect)(() => {
    let r = b.subscribeToIsAllowedTo(...n, (a) => {
      t(a);
    });
    return () => {
      r();
    };
  }, [n]), e;
}
function ui(i12, e, t) {
  let n = ci("makeDraggable"), o = Io(() => te(e) ? e() : e);
  (0, import_react2.useEffect)(() => {
    if (!n) return;
    let r = i12.current;
    if (r instanceof HTMLElement) return b.makeDraggable(r, o, t);
  }, [n, o, t]);
}
function Io(i12) {
  let e = (0, import_react2.useRef)(i12);
  return e.current = i12, (0, import_react2.useCallback)((...t) => e.current(...t), []);
}
var So = (0, import_react.forwardRef)(function({ data: e, children: t, onDragComplete: n, ...o }, r) {
  let a = (0, import_react.useRef)(null);
  if (ui(a, e, n), (0, import_react.isValidElement)(t)) {
    let d = Object.assign({}, o);
    return p(t.props) && Object.assign(d, t.props), d.ref = vo(a, r, t.ref), (0, import_react.cloneElement)(t, d);
  }
  return import_react.Children.count(t) > 1 && import_react.Children.only(t), null;
});
var Do = "current";
function No(i12) {
  return p(i12) && Do in i12;
}
function vo(...i12) {
  return (e) => {
    for (let t of i12) te(t) ? t(e) : No(t) && (t.current = e);
  };
}
export {
  v as $framerInternal,
  Ue as BooleanComponentVariable,
  et as BooleanField,
  Ye as BorderComponentVariable,
  ct as CollectionReferenceField,
  Ke as ColorComponentVariable,
  tt as ColorField,
  le as ComponentInstanceNode,
  U as ComponentNode,
  We as ConicGradient,
  Xe as DateComponentVariable,
  at as DateField,
  ue as DesignPageNode,
  So as Draggable,
  fe as EnumCase,
  _e as EnumComponentVariable,
  He as EnumComponentVariableCase,
  dt as EnumField,
  st as FieldDivider,
  qe as FileComponentVariable,
  lt as FileField,
  Ge as FormattedTextComponentVariable,
  ot as FormattedTextField,
  D as FrameNode,
  M as FramerPluginClosedError,
  oe as FramerPluginError,
  je as ImageComponentVariable,
  ye as ImageField,
  Ae as LinearGradient,
  $e as LinkComponentVariable,
  rt as LinkField,
  ut as MultiCollectionReferenceField,
  ze as NumberComponentVariable,
  it as NumberField,
  Ve as RadialGradient,
  ae as SVGNode,
  Oe as StringComponentVariable,
  nt as StringField,
  B as TextNode,
  re as UnsupportedComponentVariable,
  he as UnsupportedField,
  be as VectorSet,
  mt as VectorSetItem,
  se as VectorSetItemNode,
  ce as VectorSetNode,
  de as WebPageNode,
  b as framer,
  Ur as hasGridLayout,
  Br as hasStackLayout,
  dn as isBreakpoint,
  io as isCodeFileComponentExport,
  no as isCodeFileOverrideExport,
  j as isColorStyle,
  ln as isComponentGestureVariant,
  $ as isComponentInstanceNode,
  mn as isComponentNode,
  Yn as isComponentVariable,
  Ot as isComponentVariant,
  gn as isDesignPageNode,
  oo as isField,
  Wn as isFileAsset,
  Ze as isFrameNode,
  Rn as isImageAsset,
  un as isSVGNode,
  cn as isTextNode,
  Nt as isTextStyle,
  hn as isVectorSetItemNode,
  yn as isVectorSetNode,
  pn as isWebPageNode,
  hr as supportsAspectRatio,
  Ir as supportsBackgroundColor,
  Tr as supportsBackgroundColorData,
  Pr as supportsBackgroundGradient,
  Sr as supportsBackgroundGradientData,
  Fr as supportsBackgroundImage,
  xr as supportsBackgroundImageData,
  kr as supportsBorder,
  vr as supportsBorderRadius,
  Jn as supportsBreakpoint,
  Vr as supportsComponentInfo,
  sn as supportsComponentVariant,
  Wr as supportsFont,
  Er as supportsFontData,
  Lr as supportsImageRendering,
  Mr as supportsInlineTextStyle,
  Rr as supportsInlineTextStyleData,
  an as supportsLayout,
  wr as supportsLink,
  br as supportsLocked,
  fr as supportsName,
  Nr as supportsOpacity,
  mr as supportsPins,
  pr as supportsPosition,
  Dr as supportsRotation,
  Ar as supportsSVG,
  gr as supportsSize,
  yr as supportsSizeConstraints,
  Cr as supportsVisible,
  ci as useIsAllowedTo,
  ui as useMakeDraggable
};
//# sourceMappingURL=framer-plugin.js.map
